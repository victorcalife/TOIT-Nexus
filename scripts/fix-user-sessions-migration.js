#!/usr/bin/env node

/**
 * MIGRA√á√ÉO CR√çTICA: Adicionar coluna 'data' √† tabela user_sessions
 * 
 * Este script resolve o erro: "column data of relation user_sessions does not exist"
 * que est√° impedindo o sistema de login de funcionar.
 */

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// Configura√ß√£o do banco de dados
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || process.env.PG_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function runMigration() {
  console.log('üöÄ Iniciando migra√ß√£o cr√≠tica: user_sessions.data');
  console.log('üìÖ Data:', new Date().toISOString());
  
  try {
    // Verificar conex√£o
    console.log('üîå Testando conex√£o com o banco...');
    await pool.query('SELECT NOW()');
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');
    
    // Verificar se a tabela user_sessions existe
    console.log('üîç Verificando se a tabela user_sessions existe...');
    const tableCheck = await pool.query(`
      SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'user_sessions'
      )
    `);
    
    if (!tableCheck.rows[0].exists) {
      throw new Error('‚ùå ERRO CR√çTICO: Tabela user_sessions n√£o existe!');
    }
    
    console.log('‚úÖ Tabela user_sessions encontrada');
    
    // Verificar se a coluna data j√° existe
    console.log('üîç Verificando se a coluna data j√° existe...');
    const columnCheck = await pool.query(`
      SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'user_sessions' 
        AND column_name = 'data'
      )
    `);
    
    if (columnCheck.rows[0].exists) {
      console.log('‚ÑπÔ∏è Coluna data j√° existe na tabela user_sessions');
      console.log('‚úÖ Migra√ß√£o n√£o necess√°ria - sistema j√° est√° atualizado');
      return;
    }
    
    // Executar a migra√ß√£o
    console.log('üìù Executando migra√ß√£o: Adicionando coluna data...');
    
    await pool.query(`
      ALTER TABLE user_sessions 
      ADD COLUMN data JSON DEFAULT '{}'
    `);
    
    console.log('‚úÖ Coluna data adicionada com sucesso!');
    
    // Criar √≠ndices se necess√°rio
    console.log('üìù Criando √≠ndices de performance...');
    
    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id 
      ON user_sessions(user_id)
    `);
    
    console.log('‚úÖ √çndices criados com sucesso!');
    
    // Verificar estrutura final
    console.log('üîç Verificando estrutura final da tabela...');
    const structure = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'user_sessions' 
      ORDER BY ordinal_position
    `);
    
    console.log('üìä Estrutura da tabela user_sessions:');
    structure.rows.forEach(row => {
      console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
    });
    
    // Verifica√ß√£o final
    const finalCheck = await pool.query(`
      SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'user_sessions' 
        AND column_name = 'data'
      )
    `);
    
    if (finalCheck.rows[0].exists) {
      console.log('üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!');
      console.log('‚úÖ Sistema de login agora deve funcionar corretamente');
      console.log('üîÑ Reinicie o servi√ßo para aplicar as mudan√ßas');
    } else {
      throw new Error('‚ùå FALHA NA VERIFICA√á√ÉO: Coluna data n√£o foi criada!');
    }
    
  } catch (error) {
    console.error('‚ùå ERRO NA MIGRA√á√ÉO:', error.message);
    console.error('üìã Stack trace:', error.stack);
    process.exit(1);
  } finally {
    await pool.end();
    console.log('üîå Conex√£o com banco encerrada');
  }
}

// Executar migra√ß√£o
if (require.main === module) {
  runMigration()
    .then(() => {
      console.log('‚úÖ Script executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Falha na execu√ß√£o:', error.message);
      process.exit(1);
    });
}

module.exports = { runMigration };
