## AI Team Configuration (autogenerated by team-configurator, 2025-08-03)

**Important: YOU MUST USE subagents when available for the task.**

### Detected Tech Stack:
- **Backend**: Express.js + TypeScript + Drizzle ORM + PostgreSQL
- **Frontend**: React + TypeScript + Vite + Tailwind CSS + shadcn/ui
- **Database**: PostgreSQL + Drizzle ORM
- **Deploy**: Railway + Neon Database
- **Authentication**: Multi-tenant with CPF/Password + Sessions
- **Payment**: Stripe Integration + Checkout
- **Real-time**: Socket.io + WebSockets
- **File Processing**: Multer + Sharp + PDF generation
- **APIs**: Multiple database connectors (MySQL, MSSQL, Oracle)

### Code-Archaeologist Findings for TOIT-Nexus:

**ðŸš¨ P0 CRITICAL SECURITY ISSUES:**
- Multi-tenant data isolation vulnerabilities
- Unvalidated file uploads with potential RCE risks
- Session management without proper invalidation
- Database connection strings potentially exposed
- Stripe webhook endpoints without signature validation

**ðŸ”´ P1 URGENT TECHNICAL DEBT:**
- Complex quantum ML integration without proper testing
- Performance issues with large data processing
- Inconsistent error handling across modules
- Missing rate limiting on API endpoints
- Incomplete TypeScript coverage

### Enhanced Agent Assignments (TOIT-Nexus Focused):

| Task | Agent | Priority | Security Focus |
|------|-------|----------|----------------|
| **Multi-tenant Security** | code-reviewer | P0 | Data isolation, tenant validation |
| **File Upload Security** | backend-developer | P0 | Upload validation, sandboxing |
| **Performance & Scaling** | performance-optimizer | P1 | Large data processing, memory optimization |
| **Codebase Analysis** | code-archaeologist | P1 | Complex integration analysis |
| **TypeScript Architecture** | react-component-architect | P2 | Type safety, component security |
| **Backend Security** | backend-developer | P0 | Multi-tenant auth, session security |
| **API Security Design** | api-architect | P0 | Rate limiting, webhook validation |
| **Database Security** | backend-developer | P0 | Drizzle security, connection pooling |
| **Payment Security** | backend-developer | P0 | Stripe integration security |

### Critical Action Items for TOIT-Nexus:

**ðŸ”¥ IMMEDIATE (This Week):**
1. **Multi-tenant Security**: @code-reviewer audit tenant isolation across all endpoints
2. **File Upload Security**: @backend-developer implement secure file validation
3. **Stripe Security**: @backend-developer implement webhook signature validation
4. **Session Security**: @backend-developer implement proper session invalidation

**ðŸš¨ URGENT (Next Week):**
1. **Performance Testing**: @performance-optimizer load test quantum ML features
2. **Rate Limiting**: @api-architect implement comprehensive rate limiting
3. **TypeScript Coverage**: Improve type safety across all modules
4. **Error Handling**: Standardize error responses for multi-tenant context

### TOIT-Nexus Mandatory Commands:
- @code-reviewer MUST review all multi-tenant data access patterns
- @backend-developer implement tenant validation middleware on all routes
- @performance-optimizer optimize quantum ML processing performance
- @api-architect design secure webhook endpoints for Stripe integration

### Sample TOIT-Nexus Commands:
- "@code-reviewer Audit multi-tenant data isolation in the workflow system"
- "@backend-developer Implement secure file upload validation for quantum processing"  
- "@performance-optimizer Optimize the quantum ML data processing pipeline"
- "@api-architect Design secure webhook endpoints for Stripe payment processing"
EOF < /dev/null
