/**
 * TESTE DO TQL QU√ÇNTICO - DEMONSTRA√á√ÉO
 * Exemplos pr√°ticos da sintaxe qu√¢ntica do TQL
 */

// Usar import din√¢mico para ES modules
async function testTQL()
{
  const { default: TQLParser } = await import( './services/tql/TQLParser.js' );

  // Criar inst√¢ncia do parser
  const parser = new TQLParser();

  console.log( 'üîç TESTE DO TQL QU√ÇNTICO - SINTAXE REVOLUCION√ÅRIA\n' );

  // Teste 1: Operador = simples
  console.log( '1Ô∏è‚É£ OPERADOR = SIMPLES:' );
  const query1 = 'MOSTRAR salario DE funcionarios ONDE idade = 25';
  console.log( `TQL: ${ query1 }` );
  try
  {
    const parsed1 = parser.parse( query1 );
    const sql1 = parser.toSQL( parsed1 );
    console.log( `SQL: ${ sql1 }` );
    console.log( '‚úÖ Sucesso!\n' );
  } catch ( error )
  {
    console.log( `‚ùå Erro: ${ error.message }\n` );
  }

  // Teste 2: Operador = com lista (IN)
  console.log( '2Ô∏è‚É£ OPERADOR = COM LISTA (IN):' );
  const query2 = 'MOSTRAR nome DE usuarios ONDE status = "ativo", "pendente", "processando"';
  console.log( `TQL: ${ query2 }` );
  try
  {
    const parsed2 = parser.parse( query2 );
    console.log( 'Condi√ß√µes parseadas:', JSON.stringify( parsed2.where, null, 2 ) );
    console.log( '‚úÖ Sucesso!\n' );
  } catch ( error )
  {
    console.log( `‚ùå Erro: ${ error.message }\n` );
  }

  // Teste 3: Operador = com fun√ß√£o temporal (m√™s completo)
  console.log( '3Ô∏è‚É£ OPERADOR = COM FUN√á√ÉO TEMPORAL (M√äS COMPLETO):' );
  const query3 = 'MOSTRAR salario DE funcionarios ONDE admissao = mes(-1)';
  console.log( `TQL: ${ query3 }` );
  try
  {
    const parsed3 = parser.parse( query3 );
    console.log( 'Condi√ß√µes parseadas:', JSON.stringify( parsed3.where, null, 2 ) );
    console.log( '‚úÖ Sucesso!\n' );
  } catch ( error )
  {
    console.log( `‚ùå Erro: ${ error.message }\n` );
  }

  // Teste 4: Operador = com intervalo temporal
  console.log( '4Ô∏è‚É£ OPERADOR = COM INTERVALO TEMPORAL:' );
  const query4 = 'MOSTRAR salario DE funcionarios ONDE admissao = mes(-3) e mes';
  console.log( `TQL: ${ query4 }` );
  try
  {
    const parsed4 = parser.parse( query4 );
    console.log( 'Condi√ß√µes parseadas:', JSON.stringify( parsed4.where, null, 2 ) );
    console.log( '‚úÖ Sucesso!\n' );
  } catch ( error )
  {
    console.log( `‚ùå Erro: ${ error.message }\n` );
  }

  // Teste 5: Query complexa com m√∫ltiplas condi√ß√µes
  console.log( '5Ô∏è‚É£ QUERY COMPLEXA COM M√öLTIPLAS CONDI√á√ïES:' );
  const query5 = 'MOSTRAR nome, salario DE funcionarios ONDE departamento = "TI", "Vendas" E admissao = mes(-6) e mes';
  console.log( `TQL: ${ query5 }` );
  try
  {
    const parsed5 = parser.parse( query5 );
    console.log( 'Condi√ß√µes parseadas:', JSON.stringify( parsed5.where, null, 2 ) );
    console.log( '‚úÖ Sucesso!\n' );
  } catch ( error )
  {
    console.log( `‚ùå Erro: ${ error.message }\n` );
  }

  // Teste 6: Valida√ß√£o de query
  console.log( '6Ô∏è‚É£ VALIDA√á√ÉO DE QUERY:' );
  const query6 = 'MOSTRAR nome ONDE idade = 25'; // Query inv√°lida (sem DE)
  console.log( `TQL: ${ query6 }` );
  const validation = parser.validate( query6 );
  console.log( 'Valida√ß√£o:', validation );
  console.log( validation.valid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida' );
  console.log( '\n' );

  // Teste 7: Autocomplete
  console.log( '7Ô∏è‚É£ AUTOCOMPLETE:' );
  const partialQuery = 'MOSTRAR nome DE usuarios ';
  const suggestions = parser.getSuggestions( partialQuery, partialQuery.length );
  console.log( `Query parcial: "${ partialQuery }"` );
  console.log( 'Sugest√µes:', suggestions );
  console.log( '‚úÖ Sucesso!\n' );

  // Teste 8: Demonstra√ß√£o dos exemplos do manual
  console.log( '8Ô∏è‚É£ EXEMPLOS DO MANUAL:' );

  console.log( '\nüìù Exemplo 1: Funcion√°rios do m√™s passado' );
  const exemplo1 = 'MOSTRAR salario DE funcionarios ONDE admissao = mes(-1)';
  console.log( `TQL: ${ exemplo1 }` );
  try
  {
    const parsed = parser.parse( exemplo1 );
    console.log( '‚úÖ Parse realizado com sucesso' );
    console.log( 'Tipo de condi√ß√£o:', parsed.where[ 0 ].type );
    console.log( 'SQL gerado:', parsed.where[ 0 ].sql );
  } catch ( error )
  {
    console.log( `‚ùå Erro: ${ error.message }` );
  }

  console.log( '\nüìù Exemplo 2: Funcion√°rios de 3 meses atr√°s at√© hoje' );
  const exemplo2 = 'MOSTRAR salario DE funcionarios ONDE admissao = mes(-3) e mes';
  console.log( `TQL: ${ exemplo2 }` );
  try
  {
    const parsed = parser.parse( exemplo2 );
    console.log( '‚úÖ Parse realizado com sucesso' );
    console.log( 'Tipo de condi√ß√£o:', parsed.where[ 0 ].type );
    console.log( 'SQL gerado:', parsed.where[ 0 ].sql );
  } catch ( error )
  {
    console.log( `‚ùå Erro: ${ error.message }` );
  }

  console.log( '\nüìù Exemplo 3: M√∫ltiplos meses espec√≠ficos' );
  const exemplo3 = 'MOSTRAR salario DE funcionarios ONDE admissao = mes(-1), mes(-2), mes(-3)';
  console.log( `TQL: ${ exemplo3 }` );
  try
  {
    const parsed = parser.parse( exemplo3 );
    console.log( '‚úÖ Parse realizado com sucesso' );
    console.log( 'Tipo de condi√ß√£o:', parsed.where[ 0 ].type );
    console.log( 'Valores:', parsed.where[ 0 ].values );
  } catch ( error )
  {
    console.log( `‚ùå Erro: ${ error.message }` );
  }

  console.log( '\nüéØ CONCLUS√ÉO:' );
  console.log( 'O TQL Qu√¢ntico implementa com sucesso a filosofia de sintaxe contextual!' );
  console.log( '‚úÖ Operador "=" se adapta automaticamente ao contexto' );
  console.log( '‚úÖ Fun√ß√µes temporais intuitivas funcionando' );
  console.log( '‚úÖ Intervalos naturais implementados' );
  console.log( '‚úÖ Listas simples com v√≠rgulas funcionando' );
  console.log( '‚úÖ Valida√ß√£o e autocomplete operacionais' );
  console.log( '\nüöÄ TQL 3.0 - SINTAXE QU√ÇNTICA REVOLUCION√ÅRIA IMPLEMENTADA!' );
}

// Executar teste
testTQL().catch( console.error );
