/**
 * ROTAS ML - SISTEMA QUANTUM
 * Integra√ß√£o das rotas ML com o servidor principal
 * 100% JavaScript - SEM TYPESCRIPT
 */

// Importar rotas usando dynamic imports (compat√≠vel com ES modules)
let quantumRoutes, autoPredictionsRoutes, slotsRoutes, storageRoutes;
let AutoPredictionsService, MLSchedulerService, MLCreditsResetService, MLSlotsService, StorageManagementService;

// Fun√ß√£o para carregar m√≥dulos dinamicamente
async function loadModules()
{
  try
  {
    // Carregar rotas
    const quantumModule = await import( './quantumRoutes.js' );
    quantumRoutes = quantumModule.default;

    const autoPredictionsModule = await import( './autoPredictionsRoutes.js' );
    autoPredictionsRoutes = autoPredictionsModule.default;

    const slotsModule = await import( './slotsRoutes.js' );
    slotsRoutes = slotsModule.default;

    const storageModule = await import( '../storage/storageRoutes.js' );
    storageRoutes = storageModule.default;

    // Carregar servi√ßos
    const autoPredService = await import( '../../services/ml/AutoPredictionsService.js' );
    AutoPredictionsService = autoPredService.default;

    const mlSchedulerService = await import( '../../services/scheduler/MLSchedulerService.js' );
    MLSchedulerService = mlSchedulerService.default;

    const mlCreditsResetService = await import( '../../services/scheduler/MLCreditsResetService.js' );
    MLCreditsResetService = mlCreditsResetService.default;

    const mlSlotsService = await import( '../../services/ml/MLSlotsService.js' );
    MLSlotsService = mlSlotsService.default;

    const storageManagementService = await import( '../../services/storage/StorageManagementService.js' );
    StorageManagementService = storageManagementService.default;

    console.log( '‚úÖ [ML-MODULES] Todos os m√≥dulos ML carregados com sucesso' );

  } catch ( error )
  {
    console.error( '‚ùå [ML-MODULES] Erro ao carregar m√≥dulos ML:', error );
    throw error;
  }
}

/**
 * Configurar rotas ML no app Express
 * @param {Object} app - Inst√¢ncia do Express
 */
export async function setupMLRoutes( app )
{
  console.log( 'üîß [ML-ROUTES] Configurando rotas ML...' );

  // Carregar m√≥dulos primeiro
  await loadModules();

  // Middleware para extrair tenant ID das requisi√ß√µes
  app.use( '/api', ( req, res, next ) =>
  {
    // Extrair tenant ID do header, query ou token
    const tenantId = req.headers[ 'x-tenant-id' ] ||
      req.query.tenantId ||
      req.user?.tenantId;

    if ( tenantId )
    {
      req.tenantId = tenantId;
    }

    next();
  } );

  // Registrar rotas ML
  app.use( '/api', quantumRoutes );
  app.use( '/api', autoPredictionsRoutes );
  app.use( '/api', slotsRoutes );
  app.use( '/api', storageRoutes );

  console.log( '‚úÖ [ML-ROUTES] Rotas ML configuradas:' );
  console.log( '   ‚Ä¢ /api/ml-credits - Gerenciamento de cr√©ditos (legacy)' );
  console.log( '   ‚Ä¢ /api/ml-slots - Gerenciamento de slots ML' );
  console.log( '   ‚Ä¢ /api/storage - Gest√£o de storage por tenant' );
  console.log( '   ‚Ä¢ /api/quantum/* - Insights ML manuais' );
  console.log( '   ‚Ä¢ /api/auto-predictions - Predi√ß√µes autom√°ticas' );
}

/**
 * Inicializar servi√ßos ML
 */
export async function initializeMLServices()
{
  console.log( 'üöÄ [ML-SERVICES] Inicializando servi√ßos ML...' );

  try
  {
    // Carregar m√≥dulos se ainda n√£o foram carregados
    if ( !AutoPredictionsService )
    {
      await loadModules();
    }

    // Inicializar scheduler de predi√ß√µes autom√°ticas
    await AutoPredictionsService.initialize();

    // Inicializar scheduler principal
    await MLSchedulerService.initialize();

    // Inicializar servi√ßo de reset de cr√©ditos
    await MLCreditsResetService.initialize();

    console.log( '‚úÖ [ML-SERVICES] Servi√ßos ML inicializados com sucesso' );

    return {
      autoPredictionsService: AutoPredictionsService,
      mlSchedulerService: MLSchedulerService,
      mlCreditsResetService: MLCreditsResetService,
      mlSlotsService: MLSlotsService,
      storageManagementService: StorageManagementService
    };

  } catch ( error )
  {
    console.error( '‚ùå [ML-SERVICES] Erro ao inicializar servi√ßos ML:', error );
    throw error;
  }
}

/**
 * Parar servi√ßos ML
 */
export async function stopMLServices()
{
  console.log( 'üõë [ML-SERVICES] Parando servi√ßos ML...' );

  try
  {
    await AutoPredictionsService.close();
    await MLSchedulerService.close();
    await MLCreditsResetService.close();
    console.log( '‚úÖ [ML-SERVICES] Servi√ßos ML parados com sucesso' );

  } catch ( error )
  {
    console.error( '‚ùå [ML-SERVICES] Erro ao parar servi√ßos ML:', error );
  }
}

/**
 * Obter estat√≠sticas dos servi√ßos ML
 */
export function getMLStats()
{
  return {
    autoPredictions: AutoPredictionsService.getStats(),
    scheduler: MLSchedulerService.getStats(),
    creditsReset: MLCreditsResetService.getStats(),
    timestamp: new Date().toISOString()
  };
}

export default {
  setupMLRoutes,
  initializeMLServices,
  stopMLServices,
  getMLStats
};
