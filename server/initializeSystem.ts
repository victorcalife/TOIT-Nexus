import { storage } from "./storage";
import { scrypt, randomBytes } from "crypto";
import { promisify } from "util";

const scryptAsync = promisify(scrypt);

async function hashPassword(password: string): Promise<string> {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

export async function initializeSystem() {
  try {
    console.log("üöÄ Inicializando sistema TOIT NEXUS...");

    // 1. Criar tenant padr√£o TOIT
    let toitTenant;
    try {
      toitTenant = await storage.getTenantBySlug('toit');
      if (!toitTenant) {
        toitTenant = await storage.createTenant({
          name: 'TOIT - Administra√ß√£o',
          slug: 'toit',
          settings: {
            allowMultipleTenants: true,
            systemAdmin: true
          },
          status: 'active'
        });
        console.log("‚úÖ Tenant TOIT criado");
      }
    } catch (error) {
      console.log("‚ö†Ô∏è Tenant TOIT j√° existe ou erro:", error);
    }

    // 2. Verificar se Victor (√∫nico super admin) existe
    const adminCPF = '33656299803';
    let superAdmin;
    try {
      superAdmin = await storage.getUserByCPF(adminCPF);
      if (!superAdmin) {
        console.log("‚ö†Ô∏è SUPER ADMIN Victor n√£o encontrado. Usu√°rio deve ser criado via interface ou cadastro.");
        console.log("üìù Para criar: CPF 33656299803, Role: super_admin");
      } else {
        console.log("‚úÖ Super Admin Victor encontrado e ativo");
      }
    } catch (error) {
      console.log("‚ö†Ô∏è Erro ao verificar Super Admin Victor:", error);
    }

    // Sistema limpo - sem dados de exemplo hardcoded
    console.log("üßπ Sistema inicializado sem dados de exemplo");

    console.log("üéâ Sistema inicializado com sucesso!");
    console.log("üìã √öNICO SUPER ADMIN:");
    console.log("   Victor Calife - CPF: 33656299803, Senha: 241286");

  } catch (error) {
    console.error("‚ùå Erro inicializando sistema:", error);
  }
}