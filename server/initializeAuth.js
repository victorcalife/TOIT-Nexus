import { authService } from './authService.js';
import { db } from './db.js';
import { users, tenants } from '../shared/schema.js';
import { eq } from 'drizzle-orm';

/**
 * Inicializar dados padr√£o de autentica√ß√£o
 */
export async function initializeAuth() {
  try {
    console.log('üîê Inicializando sistema de autentica√ß√£o...');

    // 1. Executar migrations de performance
    const { runAuthMigrations } = await import('./migrations.js');
    await runAuthMigrations();

    // 2. Verificar tenants existentes
    await checkExistingTenants();

    // 3. Verificar usu√°rios existentes no banco
    await checkExistingUsers();

    // 4. Criar tenant e usu√°rio demo
    await createDemoData();

    // 5. Validar sistema
    await validateAuthSystem();

    console.log('‚úÖ Sistema de autentica√ß√£o inicializado com sucesso');

  } catch (error) {
    console.error('‚ùå Erro ao inicializar sistema de autentica√ß√£o:', error);
    throw error;
  }
}

/**
 * Verificar tenants existentes
 */
async function checkExistingTenants() {
  try {
    // Buscar todos os tenants
    const allTenants = await db.select().from(tenants);
    
    console.log(`üè¢ Encontrados ${allTenants.length} tenants no banco de dados`);
    
    // Verificar tenant TOIT especificamente
    const toitTenant = allTenants.find(tenant => tenant.slug === 'toit');
    if (toitTenant) {
      console.log(`‚úÖ Tenant TOIT encontrado - Status: ${toitTenant.status}`);
    } else {
      console.log('‚ö†Ô∏è  Tenant TOIT n√£o encontrado');
    }

  } catch (error) {
    console.error('Erro ao verificar tenants:', error);
    throw error;
  }
}

/**
 * Verificar usu√°rios existentes no banco
 */
async function checkExistingUsers() {
  try {
    // Buscar todos os usu√°rios no banco
    const allUsers = await db.select().from(users);
    
    console.log(`üìä Encontrados ${allUsers.length} usu√°rios no banco de dados`);
    
    // Buscar super admins
    const superAdmins = allUsers.filter(user => user.role === 'super_admin');
    if (superAdmins.length > 0) {
      console.log(`üëë Super Admins encontrados: ${superAdmins.length}`);
    } else {
      console.log('‚ö†Ô∏è  Nenhum Super Admin encontrado no sistema');
    }

    // Verificar usu√°rio Victor especificamente
    const victor = allUsers.find(user => user.cpf === '33656299803');
    if (victor) {
      console.log(`‚úÖ Victor Calife encontrado - Role: ${victor.role}`);
    } else {
      console.log('‚ö†Ô∏è  Victor Calife n√£o encontrado no sistema');
    }

  } catch (error) {
    console.error('Erro ao verificar usu√°rios:', error);
    throw error;
  }
}

/**
 * Sistema limpo - sem dados demo
 */
async function createDemoData() {
  // Sistema limpo - sem dados hardcoded de demonstra√ß√£o
  console.log('üßπ Sistema configurado sem dados demo');
}

/**
 * Verificar integridade do sistema de auth
 */
export async function validateAuthSystem() {
  try {
    console.log('üîç Validando sistema de autentica√ß√£o...');

    // Verificar se super admin existe
    const superAdmin = await db.select().from(users).where(eq(users.cpf, '33656299803'));
    if (superAdmin.length === 0) {
      console.log('‚ö†Ô∏è  Super admin Victor n√£o encontrado no sistema');
      return false;
    }

    if (superAdmin[0].role !== 'super_admin') {
      console.log('‚ö†Ô∏è  Usu√°rio Victor encontrado mas n√£o √© super_admin');
      return false;
    }

    console.log('‚úÖ Sistema de autentica√ß√£o validado - Super Admin Victor ativo');
    return true;

  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o do sistema de auth:', error);
    throw error;
  }
}