-- ====================================================================
-- üö® MIGRA√á√ÉO CR√çTICA PARA TABLEPLUS - EXECU√á√ÉO IMEDIATA
-- ====================================================================
-- Data: 2025-08-29
-- Problema: column "data" of relation "user_sessions" does not exist
-- Impacto: Sistema de login quebrado (erro 500)
-- Solu√ß√£o: Adicionar coluna 'data' √† tabela user_sessions
-- ====================================================================

-- PASSO 1: Verificar conex√£o e vers√£o do PostgreSQL
SELECT 
    'CONEX√ÉO ESTABELECIDA' as status,
    NOW() as timestamp,
    version() as postgresql_version;

-- PASSO 2: Verificar se a tabela user_sessions existe
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'user_sessions'
    ) THEN
        RAISE EXCEPTION '‚ùå ERRO CR√çTICO: Tabela user_sessions n√£o existe! Verifique o schema do banco.';
    ELSE
        RAISE NOTICE '‚úÖ Tabela user_sessions encontrada';
    END IF;
END $$;

-- PASSO 3: Mostrar estrutura atual da tabela
SELECT 
    'üìä ESTRUTURA ATUAL DA TABELA user_sessions' as info;

SELECT 
    column_name as "Coluna",
    data_type as "Tipo",
    is_nullable as "Nullable",
    column_default as "Default"
FROM information_schema.columns 
WHERE table_name = 'user_sessions' 
ORDER BY ordinal_position;

-- PASSO 4: Verificar se a coluna 'data' j√° existe
DO $$
DECLARE
    column_exists BOOLEAN;
BEGIN
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'user_sessions' 
        AND column_name = 'data'
    ) INTO column_exists;
    
    IF column_exists THEN
        RAISE NOTICE '‚úÖ Coluna data j√° existe - migra√ß√£o n√£o necess√°ria';
    ELSE
        RAISE NOTICE 'üö® Coluna data N√ÉO EXISTE - executando migra√ß√£o...';
        
        -- EXECUTAR A MIGRA√á√ÉO CR√çTICA
        ALTER TABLE user_sessions 
        ADD COLUMN data JSON DEFAULT '{}'::json;
        
        RAISE NOTICE '‚úÖ Coluna data adicionada com sucesso!';
    END IF;
END $$;

-- PASSO 5: Criar √≠ndices para performance (se n√£o existirem)
DO $$
BEGIN
    -- √çndice para user_id
    IF NOT EXISTS (
        SELECT 1 FROM pg_indexes 
        WHERE tablename = 'user_sessions' 
        AND indexname = 'idx_user_sessions_user_id'
    ) THEN
        CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);
        RAISE NOTICE '‚úÖ √çndice idx_user_sessions_user_id criado';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è √çndice idx_user_sessions_user_id j√° existe';
    END IF;
    
    -- √çndice para expires_at (limpeza de sess√µes expiradas)
    IF NOT EXISTS (
        SELECT 1 FROM pg_indexes 
        WHERE tablename = 'user_sessions' 
        AND indexname = 'idx_user_sessions_expires_at'
    ) THEN
        CREATE INDEX idx_user_sessions_expires_at ON user_sessions(expires_at);
        RAISE NOTICE '‚úÖ √çndice idx_user_sessions_expires_at criado';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è √çndice idx_user_sessions_expires_at j√° existe';
    END IF;
END $$;

-- PASSO 6: Verificar estrutura FINAL da tabela
SELECT 
    'üìä ESTRUTURA FINAL DA TABELA user_sessions' as info;

SELECT 
    column_name as "Coluna",
    data_type as "Tipo",
    is_nullable as "Nullable",
    column_default as "Default"
FROM information_schema.columns 
WHERE table_name = 'user_sessions' 
ORDER BY ordinal_position;

-- PASSO 7: Verificar √≠ndices criados
SELECT 
    'üìã √çNDICES DA TABELA user_sessions' as info;

SELECT 
    indexname as "Nome do √çndice",
    indexdef as "Defini√ß√£o"
FROM pg_indexes 
WHERE tablename = 'user_sessions'
ORDER BY indexname;

-- PASSO 8: Verifica√ß√£o final de sucesso
DO $$
DECLARE
    has_data_column BOOLEAN;
    column_count INTEGER;
BEGIN
    -- Verificar se a coluna data existe
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'user_sessions' 
        AND column_name = 'data'
    ) INTO has_data_column;
    
    -- Contar total de colunas
    SELECT COUNT(*) 
    FROM information_schema.columns 
    WHERE table_name = 'user_sessions'
    INTO column_count;
    
    IF has_data_column THEN
        RAISE NOTICE 'üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!';
        RAISE NOTICE '‚úÖ Coluna data est√° presente na tabela user_sessions';
        RAISE NOTICE 'üìä Total de colunas: %', column_count;
        RAISE NOTICE 'üîÑ PR√ìXIMO PASSO: Reinicie o servi√ßo backend no Railway';
        RAISE NOTICE '‚úÖ Sistema de login deve funcionar ap√≥s o restart';
    ELSE
        RAISE EXCEPTION '‚ùå FALHA NA MIGRA√á√ÉO: Coluna data n√£o foi criada!';
    END IF;
END $$;

-- PASSO 9: Mensagem final
SELECT 
    'üéâ MIGRA√á√ÉO EXECUTADA COM SUCESSO!' as status,
    NOW() as executed_at,
    'Sistema de login deve funcionar ap√≥s restart do backend' as next_step;

-- ====================================================================
-- INSTRU√á√ïES PARA TABLEPLUS:
-- ====================================================================
-- 1. Conecte-se ao banco PostgreSQL do Railway
-- 2. Cole e execute este script completo
-- 3. Verifique se todas as mensagens de sucesso aparecem
-- 4. Reinicie o servi√ßo backend no Railway
-- 5. Teste o login no frontend
-- ====================================================================
