/**
 * COMPONENTE DASHBOARD ML WIDGET
 * Widget preditivo para dashboards com insights automáticos
 * 100% JavaScript - SEM TYPESCRIPT
 */

import React, { useState, useEffect, useCallback } from 'react';
import { QuantumInsightButton } from './QuantumInsightButton';
import { useMLCredits } from '../../hooks/useMLCredits';
import { 
  Brain, 
  TrendingUp, 
  TrendingDown,
  Zap, 
  BarChart3, 
  AlertTriangle,
  RefreshCw,
  Eye,
  ChevronRight,
  Sparkles
} from 'lucide-react';

/**
 * Widget ML para dashboards
 * @param {Object} props - Propriedades do componente
 * @param {string} props.title - Título do widget
 * @param {Array} props.data - Dados para análise
 * @param {string} props.dataType - Tipo dos dados (sales, revenue, users, etc.)
 * @param {string} props.period - Período dos dados
 * @param {boolean} props.autoInsights - Se deve gerar insights automaticamente
 * @param {Function} props.onInsightClick - Callback quando insight é clicado
 * @param {string} props.size - Tamanho do widget (sm, md, lg)
 * @returns {React.ReactElement} Widget ML para dashboard
 */
export function DashboardMLWidget({
  title = 'Insights ML',
  data = [],
  dataType = 'general',
  period = '30d',
  autoInsights = false,
  onInsightClick = () => {},
  size = 'md'
}) {
  const [currentInsight, setCurrentInsight] = useState(null);
  const [isGeneratingInsight, setIsGeneratingInsight] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(null);
  const [quickStats, setQuickStats] = useState({});

  const { hasEnoughCredits, needsSetup } = useMLCredits();

  /**
   * Calcular estatísticas rápidas dos dados
   */
  const calculateQuickStats = useCallback(() => {
    if (!data || data.length === 0) return {};

    const values = data.map(item => parseFloat(item.value || item.amount || 0));
    const total = values.reduce((sum, val) => sum + val, 0);
    const average = total / values.length;
    
    // Calcular tendência (últimos 7 vs 7 anteriores)
    const recent = values.slice(-7);
    const previous = values.slice(-14, -7);
    
    const recentAvg = recent.reduce((sum, val) => sum + val, 0) / recent.length;
    const previousAvg = previous.length > 0 ? 
      previous.reduce((sum, val) => sum + val, 0) / previous.length : recentAvg;
    
    const trend = previousAvg > 0 ? ((recentAvg - previousAvg) / previousAvg) * 100 : 0;
    
    return {
      total,
      average,
      trend,
      isPositiveTrend: trend > 0,
      dataPoints: values.length,
      lastValue: values[values.length - 1] || 0
    };
  }, [data]);

  /**
   * Gerar insight automático
   */
  const generateAutoInsight = useCallback(async () => {
    if (!data || data.length < 5 || needsSetup || !hasEnoughCredits(1)) {
      return;
    }

    setIsGeneratingInsight(true);

    try {
      // Determinar melhor tipo de insight baseado no tipo de dados
      const insightType = getRecommendedInsightType(dataType, quickStats);
      
      const baseURL = process.env.REACT_APP_API_URL || '';
      const response = await fetch(`${baseURL}/api/quantum/insight`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Tenant-ID': 'default'
        },
        body: JSON.stringify({
          data: data.slice(-30), // Últimos 30 pontos
          insightType,
          options: {
            context: `dashboard_${dataType}`,
            period,
            autoGenerated: true
          }
        })
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setCurrentInsight({
            type: insightType,
            data: result.data.insight,
            timestamp: new Date().toISOString(),
            auto: true
          });
          setLastUpdate(new Date().toISOString());
        }
      }
    } catch (error) {
      console.error('Erro ao gerar insight automático:', error);
    } finally {
      setIsGeneratingInsight(false);
    }
  }, [data, dataType, period, needsSetup, hasEnoughCredits, quickStats]);

  /**
   * Obter tipo de insight recomendado
   */
  function getRecommendedInsightType(type, stats) {
    // Lógica para recomendar tipo de insight baseado nos dados
    if (Math.abs(stats.trend) > 20) {
      return 'prediction'; // Grande mudança = predição
    }
    
    if (stats.dataPoints > 20) {
      return 'anomaly'; // Muitos dados = detecção de anomalias
    }
    
    const typeMapping = {
      sales: 'prediction',
      revenue: 'prediction',
      users: 'segmentation',
      performance: 'optimization',
      costs: 'optimization'
    };
    
    return typeMapping[type] || 'prediction';
  }

  // Calcular estatísticas quando dados mudarem
  useEffect(() => {
    setQuickStats(calculateQuickStats());
  }, [calculateQuickStats]);

  // Gerar insight automático se habilitado
  useEffect(() => {
    if (autoInsights && data.length > 0 && !currentInsight) {
      const timer = setTimeout(() => {
        generateAutoInsight();
      }, 2000); // Aguardar 2s antes de gerar

      return () => clearTimeout(timer);
    }
  }, [autoInsights, data.length, currentInsight, generateAutoInsight]);

  /**
   * Renderizar indicador de tendência
   */
  const renderTrendIndicator = () => {
    if (!quickStats.trend) return null;

    const isPositive = quickStats.isPositiveTrend;
    const Icon = isPositive ? TrendingUp : TrendingDown;
    const colorClass = isPositive ? 'text-green-600' : 'text-red-600';

    return (
      <div className={`flex items-center space-x-1 ${colorClass}`}>
        <Icon className="w-4 h-4" />
        <span className="text-sm font-medium">
          {Math.abs(quickStats.trend).toFixed(1)}%
        </span>
      </div>
    );
  };

  /**
   * Renderizar insight atual
   */
  const renderCurrentInsight = () => {
    if (!currentInsight) return null;

    const insight = currentInsight.data;
    const summary = insight.summary || {};

    return (
      <div className="p-3 bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-lg">
        <div className="flex items-start justify-between mb-2">
          <div className="flex items-center space-x-2">
            <Sparkles className="w-4 h-4 text-purple-600" />
            <span className="text-sm font-medium text-purple-900">
              Insight {currentInsight.auto ? 'Automático' : 'Manual'}
            </span>
          </div>
          <button
            onClick={() => onInsightClick(currentInsight)}
            className="text-purple-600 hover:text-purple-700"
          >
            <Eye className="w-4 h-4" />
          </button>
        </div>

        <p className="text-sm text-purple-800 mb-2">
          {summary.description || 'Insight gerado com sucesso'}
        </p>

        {insight.insights && insight.insights.length > 0 && (
          <div className="text-xs text-purple-700">
            <p>• {insight.insights[0]}</p>
          </div>
        )}

        <div className="flex items-center justify-between mt-2 text-xs text-purple-600">
          <span>Tipo: {currentInsight.type}</span>
          <span>{new Date(currentInsight.timestamp).toLocaleTimeString()}</span>
        </div>
      </div>
    );
  };

  /**
   * Renderizar versão pequena
   */
  if (size === 'sm') {
    return (
      <div className="bg-white p-4 rounded-lg border shadow-sm">
        <div className="flex items-center justify-between mb-3">
          <h4 className="font-medium text-gray-900">{title}</h4>
          <Brain className="w-5 h-5 text-purple-600" />
        </div>

        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <span className="text-sm text-gray-600">Pontos de dados</span>
            <span className="font-medium">{quickStats.dataPoints || 0}</span>
          </div>

          {quickStats.trend !== undefined && (
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Tendência</span>
              {renderTrendIndicator()}
            </div>
          )}
        </div>

        {!needsSetup && hasEnoughCredits(1) && data.length > 0 && (
          <div className="mt-3">
            <QuantumInsightButton
              data={data}
              insightType="prediction"
              variant="secondary"
              size="sm"
              className="w-full"
              onSuccess={(result) => {
                setCurrentInsight({
                  type: 'prediction',
                  data: result.insight,
                  timestamp: new Date().toISOString(),
                  auto: false
                });
              }}
            >
              Gerar Insight
            </QuantumInsightButton>
          </div>
        )}
      </div>
    );
  }

  /**
   * Renderizar versão média/grande
   */
  return (
    <div className="bg-white rounded-lg border shadow-sm">
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-purple-100 rounded-lg">
              <Brain className="w-5 h-5 text-purple-600" />
            </div>
            <div>
              <h3 className="font-medium text-gray-900">{title}</h3>
              <p className="text-sm text-gray-500">
                Insights ML para {dataType} • {period}
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            {lastUpdate && (
              <span className="text-xs text-gray-500">
                Atualizado {new Date(lastUpdate).toLocaleTimeString()}
              </span>
            )}
            
            <button
              onClick={generateAutoInsight}
              disabled={isGeneratingInsight || needsSetup || !hasEnoughCredits(1)}
              className="p-1 text-gray-400 hover:text-gray-600 disabled:opacity-50"
              title="Gerar novo insight"
            >
              <RefreshCw className={`w-4 h-4 ${isGeneratingInsight ? 'animate-spin' : ''}`} />
            </button>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="p-4">
        {needsSetup ? (
          <div className="text-center py-6">
            <AlertTriangle className="w-8 h-8 text-yellow-500 mx-auto mb-2" />
            <p className="text-sm text-gray-600">
              Configure seu plano ML para ver insights
            </p>
          </div>
        ) : data.length === 0 ? (
          <div className="text-center py-6">
            <BarChart3 className="w-8 h-8 text-gray-400 mx-auto mb-2" />
            <p className="text-sm text-gray-600">
              Dados insuficientes para análise
            </p>
          </div>
        ) : (
          <div className="space-y-4">
            {/* Estatísticas rápidas */}
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center p-3 bg-gray-50 rounded-lg">
                <p className="text-sm text-gray-600">Total</p>
                <p className="text-lg font-bold text-gray-900">
                  {quickStats.total?.toLocaleString() || '0'}
                </p>
              </div>
              <div className="text-center p-3 bg-gray-50 rounded-lg">
                <p className="text-sm text-gray-600">Tendência</p>
                <div className="text-lg font-bold">
                  {renderTrendIndicator() || <span className="text-gray-400">-</span>}
                </div>
              </div>
            </div>

            {/* Insight atual */}
            {currentInsight ? (
              renderCurrentInsight()
            ) : (
              <div className="text-center py-4">
                <div className="p-3 bg-gray-50 rounded-lg">
                  <Brain className="w-6 h-6 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-600 mb-3">
                    Nenhum insight gerado ainda
                  </p>
                  
                  {hasEnoughCredits(1) && (
                    <QuantumInsightButton
                      data={data}
                      insightType={getRecommendedInsightType(dataType, quickStats)}
                      variant="primary"
                      size="sm"
                      onSuccess={(result) => {
                        setCurrentInsight({
                          type: result.insightType,
                          data: result.insight,
                          timestamp: new Date().toISOString(),
                          auto: false
                        });
                      }}
                    >
                      Gerar Primeiro Insight
                    </QuantumInsightButton>
                  )}
                </div>
              </div>
            )}

            {/* Ações rápidas */}
            {hasEnoughCredits(1) && (
              <div className="flex space-x-2">
                <QuantumInsightButton
                  data={data}
                  insightType="prediction"
                  variant="secondary"
                  size="sm"
                  className="flex-1"
                  onSuccess={(result) => {
                    setCurrentInsight({
                      type: 'prediction',
                      data: result.insight,
                      timestamp: new Date().toISOString(),
                      auto: false
                    });
                  }}
                >
                  <TrendingUp className="w-4 h-4 mr-1" />
                  Predição
                </QuantumInsightButton>

                <QuantumInsightButton
                  data={data}
                  insightType="optimization"
                  variant="secondary"
                  size="sm"
                  className="flex-1"
                  onSuccess={(result) => {
                    setCurrentInsight({
                      type: 'optimization',
                      data: result.insight,
                      timestamp: new Date().toISOString(),
                      auto: false
                    });
                  }}
                >
                  <Zap className="w-4 h-4 mr-1" />
                  Otimizar
                </QuantumInsightButton>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Footer com link para dashboard ML */}
      <div className="px-4 py-3 border-t border-gray-200 bg-gray-50">
        <button
          onClick={() => window.location.href = '/quantum-ml'}
          className="flex items-center justify-between w-full text-sm text-purple-600 hover:text-purple-700"
        >
          <span>Ver dashboard ML completo</span>
          <ChevronRight className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
}

export default DashboardMLWidget;
